/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;
import EDD.Grafo;
import EDD.ListaSimple;
import EDD.Nodo;
import org.graphstream.graph.Graph;
import org.graphstream.ui.view.Viewer;
/**
 * Clase que representa la ventana de visualización de la simulación y los resultados.
 * Esta ventana muestra el camino recorrido por cada hormiga en cada iteración de la simulación,
 * así como información sobre la iteración actual y la capacidad de mostrar el grafo correspondiente
 * a la iteración actual.
 * @author Carlos De Freitas
 * @version 24/02/2024
 */
public class Ventana3 extends javax.swing.JFrame {
    /**
     * Creates new form Ventana3
     */
    
    // Variables para controlar las iteraciones y mostrar la información
    private Nodo aux = Ventana2.iteraciones.getpFirst();
    private Nodo aux1 = Ventana2.caminosMasOptimos.getpFirst();
    private Nodo aux2 = Ventana2.grafosIteraciones.getpFirst();
    private int contador = 0;
    private final int factorHormigaTxt;
    private final Grafo grafo;
    private final ListaSimple caminoMasOptimo;
    private boolean presionado = false;
    private Graph grafoIteracion;
    
    /**
     * Constructor de la clase Ventana3.
     * Inicializa la ventana y sus componentes, así como los datos necesarios para la simulación.
     * @param factorHormiga Cantidad de hormigas en la simulación.
     * @param grafo Grafo utilizado en la simulación.
     * @param caminoMasOptimo Lista que representa el camino más óptimo encontrado en la simulación.
     */
    public Ventana3(int factorHormiga, Grafo grafo, ListaSimple caminoMasOptimo) {
        initComponents();
        this.setLocationRelativeTo(null);
        factorHormigaTxt = factorHormiga;
        this.grafo = grafo; 
        this.caminoMasOptimo = caminoMasOptimo;
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        caminosHormigas = new javax.swing.JTextArea();
        siguiente = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ciclos = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mostrarGrafo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        caminosHormigas.setEditable(false);
        caminosHormigas.setColumns(20);
        caminosHormigas.setRows(5);
        jScrollPane1.setViewportView(caminosHormigas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 360, 380));

        siguiente.setText("Iniciar iteraciones");
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });
        jPanel1.add(siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, 270, 50));

        ciclos.setEditable(false);
        ciclos.setColumns(20);
        ciclos.setRows(5);
        jScrollPane2.setViewportView(ciclos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 320, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Camino recorrido por cada hormiga:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 240, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Información sobre la iteración");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 200, 30));

        mostrarGrafo.setText("Mostrar el camino más óptimo");
        mostrarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarGrafoActionPerformed(evt);
            }
        });
        jPanel1.add(mostrarGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, 270, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento del botón "Siguiente iteración".
     * Este método avanza a la siguiente iteración de la simulación y actualiza la información mostrada en la ventana.
     * @param evt Evento de acción que desencadena el método (clic en este botón).
     */
    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        // TODO add your handling code here:
        
        if (aux == null) {
            this.setVisible(false);
            grafo.CrearGrafoVisible(caminoMasOptimo);
            grafo.getGrafoVisible().display(); 
            return;
            
        }
        
        if (aux.getpNext() == null) { 
            siguiente.setText("Finalizar simulación");
            mostrarGrafo.setVisible(false);
        }
        
        caminosHormigas.setText((String)aux.getInfo());
        
        if (aux.getpNext() == null) {
            ciclos.setText("Ciclo: " + contador + "\n" + "Cantidad de hormigas en la simulación: " + factorHormigaTxt + "\n" + "Este es el ciclo Final, al presionar Finalizar Simulación" + "\n" + "se mostrará el camino más óptimo");
        }else {
            ciclos.setText("Ciclo: " + contador + "\n" + "Cantidad de hormigas en la simulación: " + factorHormigaTxt);
            mostrarGrafo.setVisible(true);
        }
        
        
        aux = aux.getpNext();
        contador++;
        
        
        
        
        if (contador == 1) {
            siguiente.setText("Siguiente iteración");
            
                        
        }
        if (!presionado) {
            aux1 = aux1.getpNext();
            aux2 = aux2.getpNext();
            
        }
        presionado = false;
    }//GEN-LAST:event_siguienteActionPerformed

    /**
     * Maneja el evento del botón "Mostrar el camino más óptimo".
     * Este método muestra el grafo correspondiente a la iteración actual en una ventana de visualización.
     * @param evt Evento de acción que desencadena este método.
     */
    private void mostrarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarGrafoActionPerformed
        // TODO add your handling code here:
        presionado = true;
        grafoIteracion = ((Grafo) aux2.getInfo()).RetornarGrafoVisible(caminoMasOptimo);
        Viewer viewer = grafoIteracion.display();
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.HIDE_ONLY);
        if (aux1.getpNext() != null) {
            aux1 = aux1.getpNext();
            aux2 = aux2.getpNext();
        }
        
        mostrarGrafo.setVisible(false);

    }//GEN-LAST:event_mostrarGrafoActionPerformed

    /**
     * Método principal de la clase que inicia la aplicación.
     * @param args Los argumentos de la línea de comandos (no se utilizan en este caso).
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new Ventana3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea caminosHormigas;
    public static javax.swing.JTextArea ciclos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JButton mostrarGrafo;
    private javax.swing.JButton siguiente;
    // End of variables declaration//GEN-END:variables
}
